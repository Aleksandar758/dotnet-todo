---
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
      - name: Restore dependencies
        run: dotnet restore src/TodoApi.csproj
      - name: Build
        run: dotnet build src/TodoApi.csproj --configuration Release --no-restore
      - name: Run Code Analysis
        uses: github/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.gitversion.outputs.semVer }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1
      - name: Start minikube
        uses: medyagh/setup-minikube@master
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to minikube
        run: |
          eval $(minikube docker-env)
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          helm upgrade --install todo-api ./helm/todo-api \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ needs.build.outputs.version }}
      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available deployment/todo-api --timeout=60s
      - name: Test API Endpoints
        run: |
          kubectl port-forward svc/todo-api 8080:80 &
          sleep 10
          curl -f http://localhost:8080/healthz
          response=$(curl -f -s http://localhost:8080/todoitems)
          if [ "$response" != "[]" ] && [ "$response" != "" ]; then
            echo "Todo items endpoint test passed"
          else
            echo "Todo items endpoint test failed"
            exit 1
          fi
