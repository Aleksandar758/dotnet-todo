---
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating tags
      packages: write  # Needed for pushing to GHCR
    outputs:
      version: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore src/TodoApi.csproj

      - name: Build
        run: dotnet build src/TodoApi.csproj --configuration Release --no-restore

      - name: Run Code Analysis
        uses: github/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.26.3
          start-args: --memory 2048 --cpus 2

      - name: Configure minikube
        run: |
          minikube status
          minikube addons enable registry
          minikube addons enable ingress
          kubectl get pods -A

      - name: Create required namespaces
        run: |
          kubectl create namespace todo-api --dry-run=client -o yaml | kubectl apply -f -

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to minikube
        run: |
          eval $(minikube docker-env)
          
          # Pull the image
          echo "Pulling image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          
          # Install/upgrade Helm chart with debug output
          echo "Deploying with Helm..."
          helm upgrade todo-api ./helm/todo-api \
            --install \
            --wait \
            --debug \
            --timeout 3m \
            --namespace todo-api \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ needs.build.outputs.version }}
          
          # Check deployment status
          echo "Checking deployment status..."
          kubectl get pods -n todo-api
          kubectl get services -n todo-api

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be available..."
          kubectl wait --namespace todo-api --for=condition=available deployment/todo-api --timeout=90s
          
          echo "Checking pod status..."
          kubectl get pods -n todo-api
          kubectl describe pods -n todo-api -l app.kubernetes.io/name=todo-api

      - name: Test API Endpoints
        run: |
          echo "Setting up port forward..."
          kubectl -n todo-api port-forward svc/todo-api 8080:80 &
          sleep 15
          
          echo "Testing health endpoint..."
          curl -v http://localhost:8080/healthz
          
          echo "Testing todoitems endpoint..."
          response=$(curl -f -s http://localhost:8080/todoitems)
          echo "Response from API: $response"
          if [ "$response" != "[]" ] && [ "$response" != "" ]; then
            echo "? Todo items endpoint test passed"
          else
            echo "? Todo items endpoint test failed"
            exit 1
          fi
